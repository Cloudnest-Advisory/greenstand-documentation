name: Team Membership Audit (org-wide)

on:
  workflow_dispatch:
    inputs:
      org:
        description: "Org to scan (defaults to current repo owner)"
        required: false
      min_teams:
        description: "Minimum number of teams each user must be in"
        required: false
        default: "1"
      required_team_regex:
        description: "Optional regex; at least one team must match (e.g., ^(Contributors|Maintainers)$)"
        required: false
        default: ""
      include_outside_collaborators:
        description: "Also audit outside collaborators"
        required: false
        default: "true"
      skip_org_admins:
        description: "Skip users with org admin/owner role"
        required: false
        default: "true"
      exclude_users_csv:
        description: "Comma-separated logins to exclude (e.g., bot-1,octocat)"
        required: false
        default: ""
  # Uncomment to run weekly on Mondays 09:00 UTC
  # schedule:
  #   - cron: "0 9 * * 1"

permissions:
  contents: read

jobs:
  audit:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.ORG_READ_TOKEN || secrets.GITHUB_TOKEN }}
      ORG_INPUT: ${{ github.event.inputs.org }}
      MIN_TEAMS: ${{ github.event.inputs.min_teams }}
      REQUIRED_TEAM_REGEX: ${{ github.event.inputs.required_team_regex }}
      INCLUDE_OUTSIDERS: ${{ github.event.inputs.include_outside_collaborators }}
      SKIP_ADMINS: ${{ github.event.inputs.skip_org_admins }}
      EXCLUDE_USERS_CSV: ${{ github.event.inputs.exclude_users_csv }}

    steps:
      - name: Resolve org
        id: ctx
        run: |
          if [ -n "$ORG_INPUT" ]; then ORG="$ORG_INPUT"; else ORG="${{ github.repository_owner }}"; fi
          echo "org=$ORG" >> $GITHUB_OUTPUT
          echo "Scanning org: $ORG"

      - name: Debug inputs
        run: |
          echo "MIN_TEAMS='$MIN_TEAMS'"
          echo "REQUIRED_TEAM_REGEX='$REQUIRED_TEAM_REGEX'"
          echo "INCLUDE_OUTSIDERS='$INCLUDE_OUTSIDERS'"
          echo "SKIP_ADMINS='$SKIP_ADMINS'"
          echo "EXCLUDE_USERS_CSV='$EXCLUDE_USERS_CSV'"

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Audit team membership
        id: audit
        uses: actions/github-script@v7
        with:
          github-token: ${{ env.GH_TOKEN }}
          script: |
            const org = "${{ steps.ctx.outputs.org }}";
            const minTeams = parseInt(process.env.MIN_TEAMS || "1", 10);
            const requiredRe = (process.env.REQUIRED_TEAM_REGEX || "").trim();
            let includeOutsiders = (process.env.INCLUDE_OUTSIDERS || "true").toLowerCase() === "true";
            const skipAdmins = (process.env.SKIP_ADMINS || "true").toLowerCase() === "true";
            const excludeSet = new Set(
              (process.env.EXCLUDE_USERS_CSV || "")
                .split(",").map(s => s.trim().toLowerCase()).filter(Boolean)
            );
            const reqTeam = requiredRe ? new RegExp(requiredRe, "i") : null;

            // Helper: paginate wrapper
            async function p(route, params) {
              return await github.paginate(route, { per_page: 100, ...params });
            }

            // Who is this token?
            try {
              const me = (await github.request("GET /user")).data.login;
              core.info(`Using token for: ${me}`);
              try {
                const { data: mem } = await github.request("GET /orgs/{org}/memberships/{username}", { org, username: me });
                core.info(`Token org role: ${mem.role}`); // admin | member
              } catch (e) {
                core.info(`Could not resolve token's org membership: ${e.message}`);
              }
            } catch {}

            // Fetch org members (needs read:org)
            const members = await p("GET /orgs/{org}/members", { org });

            // Try outside collaborators; if 403, skip and continue
            let outsiders = [];
            if (includeOutsiders) {
              try {
                outsiders = await p("GET /orgs/{org}/outside_collaborators", { org });
              } catch (e) {
                if (e.status === 403) {
                  core.warning("403 listing outside collaborators. You must be an ORG OWNER with admin:org. Skipping outsiders.");
                } else {
                  core.warning(`Error listing outside collaborators: ${e.message}. Skipping outsiders.`);
                }
                includeOutsiders = false;
              }
            }

            // Fetch all teams and their members
            const teams = await p("GET /orgs/{org}/teams", { org });
            const teamMembersMap = new Map(); // team_slug -> Set<login>
            for (const t of teams) {
              try {
                const tMembers = await p("GET /orgs/{org}/teams/{team_slug}/members", {
                  org, team_slug: t.slug
                });
                teamMembersMap.set(t.slug, new Set(tMembers.map(u => u.login.toLowerCase())));
              } catch (e) {
                core.warning(`Cannot list members for team ${t.slug}: ${e.message}`);
                teamMembersMap.set(t.slug, new Set());
              }
            }

            // Build user -> teams map
            const userTeamsMap = new Map(); // login -> array of {slug, name}
            function addTeamToUser(login, team) {
              const k = login.toLowerCase();
              const arr = userTeamsMap.get(k) || [];
              arr.push({ slug: team.slug, name: team.name });
              userTeamsMap.set(k, arr);
            }
            for (const t of teams) {
              const set = teamMembersMap.get(t.slug) || new Set();
              for (const login of set) addTeamToUser(login, { slug: t.slug, name: t.name });
            }

            // Role cache + helper
            const roleCache = new Map();
            async function getRole(login) {
              const k = login.toLowerCase();
              if (roleCache.has(k)) return roleCache.get(k);
              try {
                const { data } = await github.request("GET /orgs/{org}/memberships/{username}", { org, username: login });
                roleCache.set(k, data.role); // "admin" | "member"
                return data.role;
              } catch {
                roleCache.set(k, "member");
                return "member";
              }
            }

            // Compose population
            const population = [
              ...members.map(u => ({ login: u.login, type: "member" })),
              ...(includeOutsiders ? outsiders.map(u => ({ login: u.login, type: "outside_collaborator" })) : [])
            ];
            // Dedup: prefer member over outside_collaborator
            const seen = new Map();
            for (const p of population) {
              const k = p.login.toLowerCase();
              if (!seen.has(k)) seen.set(k, p);
              else if (seen.get(k).type !== "member" && p.type === "member") seen.set(k, p);
            }

            const rows = [];
            for (const { login, type } of seen.values()) {
              if (excludeSet.has(login.toLowerCase())) continue;

              const role = await getRole(login);
              if (skipAdmins && role === "admin") continue;

              const teamsForUser = userTeamsMap.get(login.toLowerCase()) || [];
              const teamNames = teamsForUser.map(t => t.name);
              const teamSlugs = teamsForUser.map(t => t.slug);

              const hasMinTeams = teamsForUser.length >= (isNaN(minTeams) ? 1 : minTeams);
              const matchesRequired = reqTeam ? (teamNames.some(n => reqTeam.test(n)) || teamSlugs.some(s => reqTeam.test(s))) : true;

              const compliant = hasMinTeams && matchesRequired;
              const notes = [];
              if (!hasMinTeams) notes.push(`requires >=${minTeams} teams`);
              if (!matchesRequired && reqTeam) notes.push(`requires team matching /${requiredRe}/`);

              rows.push({
                login,
                type,              // member | outside_collaborator
                role,              // admin | member
                team_count: teamsForUser.length,
                teams: teamNames,  // human-friendly names
                compliant,
                notes: notes.join("; ")
              });
            }

            // Sort: non-compliant first, then login
            rows.sort((a,b) => (a.compliant === b.compliant) ? a.login.localeCompare(b.login) : (a.compliant ? 1 : -1));

            core.setOutput("json", JSON.stringify({
              org,
              generated_at: new Date().toISOString().slice(0,10),
              policy: {
                min_teams: minTeams,
                required_team_regex: requiredRe || null,
                include_outside_collaborators: includeOutsiders,
                skip_org_admins: skipAdmins
              },
              results: rows
            }));

      - name: Write JSON to file
        run: |
          echo '${{ steps.audit.outputs.json }}' > team_membership_audit.json
          cat team_membership_audit.json | jq '.results | length as $n | "Total audited: \($n)"'

      - name: Convert JSON to CSV
        run: |
          jq -r '
            ["login","type","role","team_count","teams","compliant","notes"],
            (.results[] | [
              .login,
              .type,
              .role,
              .team_count,
              (.teams | join("; ")),
              (if .compliant then "true" else "false" end),
              .notes
            ]) | @csv
          ' team_membership_audit.json > team_membership_audit.csv

      - name: Upload audit artifacts
        uses: actions/upload-artifact@v4
        with:
          name: team-membership-audit
          path: |
            team_membership_audit.json
            team_membership_audit.csv

      # ---------- Visual summaries (Node-based, no jq pitfalls) ----------
      - name: Build visual summary (JSON)
        id: build_summary
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');

            const audit = JSON.parse(fs.readFileSync('team_membership_audit.json','utf8'));
            const results = Array.isArray(audit.results) ? audit.results : [];

            const total = results.length;
            const members = results.filter(r => r.type === 'member').length;
            const outsiders = results.filter(r => r.type === 'outside_collaborator').length;
            const ok = results.filter(r => r.compliant === true).length;
            const bad = total - ok;

            const teamCounts = results.map(r => r.team_count || 0).sort((a,b)=>a-b);
            const minTC = teamCounts[0] ?? 0;
            const maxTC = teamCounts[teamCounts.length-1] ?? 0;
            const avgTC = total ? (teamCounts.reduce((s,n)=>s+n,0) / total) : 0;
            const medianTC = total
              ? ((teamCounts[Math.floor((total-1)/2)] + teamCounts[Math.floor(total/2)]) / 2)
              : 0;

            const belowMin = results.filter(r => (r.notes || '').includes('requires >=')
              || (r.team_count || 0) < (audit?.policy?.min_teams ?? 1)).length;

            const reqRe = audit?.policy?.required_team_regex
              ? new RegExp(audit.policy.required_team_regex, 'i')
              : null;
            const missingRequired = reqRe
              ? results.filter(r => !(r.teams || []).some(t => reqRe.test(t))).length
              : 0;

            // Per-team coverage
            const perTeamMap = new Map();
            for (const r of results) {
              for (const t of (r.teams || [])) {
                perTeamMap.set(t, (perTeamMap.get(t) || 0) + 1);
              }
            }
            const perTeam = [...perTeamMap.entries()]
              .map(([team, users]) => ({ team, users }))
              .sort((a,b)=> b.users - a.users);

            const summary = {
              org: audit.org,
              generated_at: audit.generated_at,
              policy: audit.policy || {},
              totals: {
                audited: total,
                members,
                outside_collaborators: outsiders
              },
              compliance: {
                compliant: ok,
                non_compliant: bad,
                pct_compliant: total ? Math.floor((ok * 100) / total) : 0
              },
              gaps: {
                below_min_teams: belowMin,
                missing_required_team: missingRequired
              },
              team_count_stats: {
                min: minTC,
                max: maxTC,
                avg: Math.floor(avgTC * 100) / 100,
                median: medianTC
              },
              per_team_coverage: perTeam
            };

            core.setOutput('summary_json', JSON.stringify(summary));

      - name: Write summary JSON to file
        run: |
          echo '${{ steps.build_summary.outputs.summary_json }}' > audit_summary.json
          jq -r '.compliance' audit_summary.json || true

      - name: Export summary as key/value CSV
        run: |
          jq -r '
            [
              ["metric","value"],
              ["org",              .org],
              ["generated_at",     .generated_at],
              ["audited",          .totals.audited],
              ["members",          .totals.members],
              ["outside_collab",   .totals.outside_collaborators],
              ["compliant",        .compliance.compliant],
              ["non_compliant",    .compliance.non_compliant],
              ["pct_compliant",    .compliance.pct_compliant],
              ["below_min_teams",  .gaps.below_min_teams],
              ["missing_required", .gaps.missing_required_team],
              ["team_count_min",   .team_count_stats.min],
              ["team_count_max",   .team_count_stats.max],
              ["team_count_avg",   .team_count_stats.avg],
              ["team_count_median",.team_count_stats.median]
            ] | map(@csv)[]' audit_summary.json > audit_summary_kv.csv

      - name: Export per-team coverage CSV
        run: |
          jq -r '
            ["team","users"],
            (.per_team_coverage[] | [ .team, .users ]) | @csv
          ' audit_summary.json > per_team_coverage.csv

      - name: Append summary to run page
        run: |
          A=$(jq -r '.totals.audited' audit_summary.json)
          C=$(jq -r '.compliance.compliant' audit_summary.json)
          NC=$(jq -r '.compliance.non_compliant' audit_summary.json)
          P=$(jq -r '.compliance.pct_compliant' audit_summary.json)
          BM=$(jq -r '.gaps.below_min_teams' audit_summary.json)
          MR=$(jq -r '.gaps.missing_required_team' audit_summary.json)
          {
            echo "## Team Membership Audit — Summary"
            echo ""
            echo "| Metric | Value |"
            echo "|---|---:|"
            echo "| Audited users | $A |"
            echo "| Compliant | $C |"
            echo "| Non-compliant | $NC |"
            echo "| % Compliant | ${P}% |"
            echo "| Below min teams | $BM |"
            echo "| Missing required team | $MR |"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Upload summary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: team-membership-audit-summary
          path: |
            audit_summary.json
            audit_summary_kv.csv
            per_team_coverage.csv
