name: User Activity (repo)

on:
  workflow_dispatch:
    inputs:
      username:
        description: "GitHub login to check (e.g., octocat)"
        required: true
      lookback_days:
        description: "Only consider events updated in the last N days (comments)"
        required: false
        default: "90"

permissions:
  contents: read
  issues: read
  pull-requests: read

jobs:
  user-activity:
    runs-on: ubuntu-latest
    steps:
      - name: Gather latest commit by user in this repo
        id: commits
        uses: actions/github-script@v7
        with:
          script: |
            const username = core.getInput('username', { required: true });
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split("/");
            // Latest commit by author in this repo
            // NOTE: only returns commits attributed to that GitHub user as author
            const commits = await github.request(
              "GET /repos/{owner}/{repo}/commits",
              { owner, repo, author: username, per_page: 1 }
            );
            const latestCommit = commits.data[0] ?? null;

            core.setOutput("commit_sha", latestCommit?.sha ?? "");
            core.setOutput("commit_url", latestCommit?.html_url ?? "");
            core.setOutput("commit_date", latestCommit?.commit?.author?.date ?? "");
            core.setOutput("commit_message", latestCommit?.commit?.message ?? "");

      - name: Gather latest issue/PR comment by user in this repo
        id: comments
        uses: actions/github-script@v7
        with:
          script: |
            const username = core.getInput('username', { required: true });
            const lookbackDays = parseInt(core.getInput('lookback_days') || "90", 10);
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split("/");
            const since = new Date(Date.now() - lookbackDays*24*60*60*1000).toISOString();

            // We’ll check three streams and keep the newest:
            // 1) Issue comments
            // 2) PR review comments
            // 3) Discussion comments (if enabled; ignore errors)

            let best = null;
            const consider = (item, type, url, createdAt, body) => {
              const when = new Date(createdAt).getTime();
              if (!best || when > best.when) {
                best = { type, url, createdAt, body };
              }
            };

            // 1) Issue comments (includes PR “conversation” comments too)
            const issueComments = await github.paginate(
              "GET /repos/{owner}/{repo}/issues/comments",
              { owner, repo, since, per_page: 100 }
            );
            issueComments
              .filter(c => c.user?.login?.toLowerCase() === username.toLowerCase())
              .forEach(c => consider(c, "issue_comment", c.html_url, c.updated_at || c.created_at, c.body));

            // 2) PR review comments
            const reviewComments = await github.paginate(
              "GET /repos/{owner}/{repo}/pulls/comments",
              { owner, repo, since, per_page: 100 }
            );
            reviewComments
              .filter(c => c.user?.login?.toLowerCase() === username.toLowerCase())
              .forEach(c => consider(c, "pr_review_comment", c.html_url, c.updated_at || c.created_at, c.body));

            // 3) Discussions comments (best effort; may 404 if discussions disabled)
            try {
              const discComments = await github.paginate(
                "GET /repos/{owner}/{repo}/discussions/comments",
                { owner, repo, per_page: 100 }
              );
              discComments
                .filter(c =>
                  c.updated_at >= since &&
                  c.user?.login?.toLowerCase() === username.toLowerCase()
                )
                .forEach(c => consider(c, "discussion_comment", c.html_url, c.updated_at || c.created_at, c.body));
            } catch(e) {
              core.info("Discussions not enabled or API not available; skipping.");
            }

            if (best) {
              core.setOutput("comment_type", best.type);
              core.setOutput("comment_url", best.url);
              core.setOutput("comment_date", best.createdAt);
              core.setOutput("comment_excerpt", (best.body || "").slice(0, 200));
            } else {
              core.setOutput("comment_type", "");
              core.setOutput("comment_url", "");
              core.setOutput("comment_date", "");
              core.setOutput("comment_excerpt", "");
            }

      - name: Summarize
        run: |
          {
            echo "### User activity summary";
            echo "";
            echo "**User:** \`${{ github.event.inputs.username }}\`";
            echo "**Repo:** \`${{ github.repository }}\`";
            echo "";
            echo "#### Latest commit";
            if [ -n "${{ steps.commits.outputs.commit_sha }}" ]; then
              echo "- SHA: \`${{ steps.commits.outputs.commit_sha }}\`";
              echo "- Message: ${{ steps.commits.outputs.commit_message }}";
              echo "- Date: \`${{ steps.commits.outputs.commit_date }}\`";
              echo "- URL: ${{ steps.commits.outputs.commit_url }}";
            else
              echo "_No commits found in this repo by that user in API results._";
            fi
            echo "";
            echo "#### Latest comment (issue/PR/discussion)";
            if [ -n "${{ steps.comments.outputs.comment_url }}" ]; then
              echo "- Type: \`${{ steps.comments.outputs.comment_type }}\`";
              echo "- Date: \`${{ steps.comments.outputs.comment_date }}\`";
              echo "- URL: ${{ steps.comments.outputs.comment_url }}";
              echo "- Excerpt: `${{ steps.comments.outputs.comment_excerpt }}`";
            else
              echo "_No comments found for that user in the last ${{ github.event.inputs.lookback_days }} days._";
            fi
          } >> "$GITHUB_STEP_SUMMARY"
